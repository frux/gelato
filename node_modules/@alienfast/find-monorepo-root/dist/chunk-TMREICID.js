// src/findMonorepoRoot.ts
import { findUp } from "find-up";

// src/util.ts
import fs from "node:fs";
import path from "node:path";
import stripJsonComments from "strip-json-comments";
var exists = (dir, file) => fs.existsSync(path.join(dir, file));
function readJson(dir, file) {
  if (!exists(dir, file)) {
    return void 0;
  }
  const filePath = path.join(dir, file);
  try {
    return JSON.parse(stripJsonComments(fs.readFileSync(filePath, "utf8")));
  } catch (e) {
    throw new Error(`${e}. Error reading ${filePath}`);
  }
}
var determinePackageManager = (pkg, dir) => {
  if (process.env.NODE_ENV === "test" && pkg.name === "@alienfast/find-monorepo-root") {
    return void 0;
  }
  if (pkg.packageManager && pkg.packageManager.includes("yarn") && pkg.workspaces) {
    return "yarn";
  } else if (pkg.bolt) {
    return "bolt";
  } else if (exists(dir, "pnpm-workspace.yaml")) {
    return "pnpm";
  } else if (exists(dir, "yarn.lock")) {
    return "yarn";
  } else if (exists(dir, "package-lock.json")) {
    return "npm";
  } else if (pkg.workspaces) {
    return "yarn";
  }
  return void 0;
};
var findByPackageManager = (dir) => {
  const pkg = readJson(dir, "package.json");
  if (!pkg) {
    return void 0;
  }
  const strategy = determinePackageManager(pkg, dir);
  if (!strategy) {
    return void 0;
  }
  return { strategy, dir };
};
var findLerna = (dir) => {
  const lerna = readJson(dir, "lerna.json");
  if (lerna) {
    if (lerna.useWorkspaces || lerna.packages) {
      return { strategy: "lerna", dir };
    }
  }
  return void 0;
};

// src/findMonorepoRoot.ts
async function findMonorepoRoot(cwd) {
  let ret;
  await findUp(
    async (parent) => {
      ret = findLerna(parent) || findByPackageManager(parent);
      return ret && ret.dir;
    },
    { cwd, type: "directory" }
  );
  if (!ret) {
    throw new Error(
      `No monorepo root could be found upwards from the directory ${cwd} using lerna, yarn, pnpm, or npm as indicators.`
    );
  }
  return ret;
}

export {
  exists,
  readJson,
  findByPackageManager,
  findLerna,
  findMonorepoRoot
};
//# sourceMappingURL=chunk-TMREICID.js.map