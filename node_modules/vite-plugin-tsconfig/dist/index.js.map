{"version":3,"sources":["../src/index.ts","../src/util.ts"],"sourcesContent":["import fs from 'node:fs'\nimport path from 'node:path'\n\nimport { findMonorepoRoot, Result } from '@alienfast/find-monorepo-root'\nimport { marked } from 'marked'\nimport TerminalRenderer from 'marked-terminal'\nimport { createLogger, LogLevel, Plugin } from 'vite'\n\nimport { revertTsConfig, Swapped, swapTsConfig } from './util'\n\nmarked.setOptions({\n  renderer: new TerminalRenderer() as any,\n})\n\n// unfortunately not exported\nexport const LogLevels: Record<LogLevel, number> = {\n  silent: 0,\n  error: 1,\n  warn: 2,\n  info: 3,\n}\n\nexport interface PluginOptions {\n  /**\n   * Set to 'info' for noisy information.\n   *\n   * Default: 'warn'\n   */\n  logLevel?: LogLevel\n\n  /**\n   * Name of the replacement tsconfig file to use\n   */\n  filename: string\n\n  /**\n   * Relative paths to packages that should also have their tsconfig.json files swapped. e.g. ['packages/foo', 'packages/bar']\n   */\n  workspaces?: string[]\n}\n\nconst TSCONFIG = 'tsconfig.json'\nconst BANNER = `// GENERATED via 'vite-plugin-tsconfig' - this should be automatically created and deleted inside the build process. \\n`\n\nconst hasBanner = (tsconfigPath: string) => {\n  const content = fs.readFileSync(tsconfigPath, 'utf8')\n  return content.startsWith(BANNER.trim())\n}\n\nconst factory = (options: PluginOptions) => {\n  const { filename, logLevel = 'warn' } = options\n  const log = createLogger(logLevel, { prefix: '[tsconfig]' })\n\n  let root: string\n  const swapped: Swapped[] = []\n\n  const plugin: Plugin = {\n    name: 'vite-plugin-tsconfig',\n\n    async config(config) {\n      root ??= config.root ?? process.cwd()\n\n      let monorepoRoot: Result | undefined\n      try {\n        monorepoRoot = await findMonorepoRoot(root)\n      } catch (e) {\n        //\n      }\n\n      log.info(`monorepoRoot: ${monorepoRoot ? monorepoRoot.dir : '(none)'}`)\n\n      // e.g. if we are in a monorepo, but running vitest at the cwd of the package, we don't want to seek down from there and swap the tsconfig.json files\n      const isAtMonoRepoRoot = monorepoRoot !== undefined && monorepoRoot.dir === root\n\n      // swap the workspace tsconfig.json files\n      if (isAtMonoRepoRoot && options.workspaces) {\n        for (const workspace of options.workspaces) {\n          const dir = path.resolve(root, workspace)\n          if (!fs.existsSync(dir)) {\n            throw new Error(`Expected workspace ${dir} to exist`)\n          }\n\n          const swap = swapTsConfig(filename, dir, log)\n          swapped.push(swap)\n        }\n      }\n\n      // swap the root tsconfig.json file\n      const swap = swapTsConfig(filename, root, log)\n      swapped.push(swap)\n    },\n\n    closeBundle() {\n      if (!root) {\n        throw new Error('Expected root to be set in the vite config hook.')\n      }\n\n      // revert the tsconfig.json files\n      for (const swap of swapped) {\n        revertTsConfig(swap, log)\n      }\n    },\n  }\n\n  return plugin\n}\n\nexport default factory\n","import fs from 'node:fs'\nimport path from 'node:path'\n\nimport { marked } from 'marked'\nimport TerminalRenderer from 'marked-terminal'\nimport { Logger } from 'vite'\n\nmarked.setOptions({\n  renderer: new TerminalRenderer() as any,\n})\n\nconst TSCONFIG = 'tsconfig.json'\nconst BANNER = `// GENERATED via 'vite-plugin-tsconfig' - this should be automatically created and deleted inside the build process. \\n`\nconst BAK = 'bak.vite-plugin-tsconfig'\n\nconst hasBanner = (tsconfigPath: string) => {\n  const content = fs.readFileSync(tsconfigPath, 'utf8')\n  return content.startsWith(BANNER.trim())\n}\n\nexport interface Swapped {\n  dir: string\n  backupFilePath: string | undefined\n}\n\n/**\n *\n * @param filename\n * @param dir\n * @param log\n */\nexport const swapTsConfig = (filename: string, dir: string, log: Logger): Swapped => {\n  if (!fs.existsSync) {\n    throw new Error(`Expected dir ${dir} to exist`)\n  }\n\n  const tsconfigPath = path.resolve(dir, TSCONFIG)\n  let backupFilePath: string | undefined = undefined\n\n  // if the tsconfig.json file already exists, we need to back it up and replace it later\n  if (fs.existsSync(tsconfigPath)) {\n    log.info(`${TSCONFIG} already exists, moving it to ${TSCONFIG}.${BAK} at ${dir}`)\n    backupFilePath = path.resolve(dir, `${TSCONFIG}.${BAK}`)\n\n    // paranoia check\n    if (fs.existsSync(backupFilePath)) {\n      fs.rmSync(backupFilePath)\n    }\n\n    fs.renameSync(tsconfigPath, `${tsconfigPath}.${BAK}`)\n  }\n\n  // now\n  const providedTsConfig = path.resolve(dir, filename)\n  if (!fs.existsSync(providedTsConfig)) {\n    throw new Error(`${providedTsConfig} does not exist.`)\n  }\n\n  log.info(`Creating ${TSCONFIG} from ${filename} at ${dir}`)\n  const providedTsConfigContent = fs.readFileSync(providedTsConfig, 'utf8')\n  fs.writeFileSync(tsconfigPath, BANNER + providedTsConfigContent)\n\n  return { dir, backupFilePath }\n}\n\nexport const revertTsConfig = (swapped: Swapped, log: Logger) => {\n  const { dir, backupFilePath } = swapped\n  if (!fs.existsSync) {\n    throw new Error(`Expected dir ${dir} to exist`)\n  }\n\n  const tsconfigPath = path.resolve(dir, TSCONFIG)\n\n  // perhaps we never created the tsconfig file?\n  if (!fs.existsSync(tsconfigPath)) {\n    log.info(`No tsconfig file found at ${dir}, nothing to do.`)\n    return\n  }\n\n  // perhaps the user has a standard tsconfig file but we did not create it?\n  if (!hasBanner(tsconfigPath)) {\n    log.info(`tsconfig.json found at ${dir} but it does not contain theb banner, nothing to do.`)\n    return\n  }\n\n  log.info(`Removing generated tsconfig.json at ${dir}`)\n  fs.rmSync(tsconfigPath)\n\n  if (!backupFilePath) {\n    log.info(`No backup file to restore at ${dir}`)\n    return\n  }\n\n  if (fs.existsSync(backupFilePath)) {\n    log.info(`Restoring ${TSCONFIG} from backup at ${dir}`)\n    fs.renameSync(backupFilePath, tsconfigPath)\n  } else {\n    // at this point it is expected\n    log.error(`Backup file ${backupFilePath} does not exist.`)\n  }\n}\n"],"mappings":"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","names":["fs","path","marked","TerminalRenderer","marked","TerminalRenderer","path","fs","swap"]}